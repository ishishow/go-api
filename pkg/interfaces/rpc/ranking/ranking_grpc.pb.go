// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ranking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RankingServiceClient is the client API for RankingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RankingServiceClient interface {
	RankingList(ctx context.Context, in *RankingListRequest, opts ...grpc.CallOption) (*RankingListResponse, error)
}

type rankingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRankingServiceClient(cc grpc.ClientConnInterface) RankingServiceClient {
	return &rankingServiceClient{cc}
}

func (c *rankingServiceClient) RankingList(ctx context.Context, in *RankingListRequest, opts ...grpc.CallOption) (*RankingListResponse, error) {
	out := new(RankingListResponse)
	err := c.cc.Invoke(ctx, "/user.RankingService/RankingList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RankingServiceServer is the server API for RankingService service.
// All implementations must embed UnimplementedRankingServiceServer
// for forward compatibility
type RankingServiceServer interface {
	RankingList(context.Context, *RankingListRequest) (*RankingListResponse, error)
	// mustEmbedUnimplementedRankingServiceServer()
}

// UnimplementedRankingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRankingServiceServer struct {
}

func (UnimplementedRankingServiceServer) RankingList(context.Context, *RankingListRequest) (*RankingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RankingList not implemented")
}
func (UnimplementedRankingServiceServer) mustEmbedUnimplementedRankingServiceServer() {}

// UnsafeRankingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RankingServiceServer will
// result in compilation errors.
type UnsafeRankingServiceServer interface {
	mustEmbedUnimplementedRankingServiceServer()
}

func RegisterRankingServiceServer(s grpc.ServiceRegistrar, srv RankingServiceServer) {
	s.RegisterService(&RankingService_ServiceDesc, srv)
}

func _RankingService_RankingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingServiceServer).RankingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.RankingService/RankingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingServiceServer).RankingList(ctx, req.(*RankingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RankingService_ServiceDesc is the grpc.ServiceDesc for RankingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RankingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.RankingService",
	HandlerType: (*RankingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RankingList",
			Handler:    _RankingService_RankingList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ranking.proto",
}
