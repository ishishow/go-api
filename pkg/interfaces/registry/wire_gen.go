// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package registry

import (
	"20dojo-online/pkg/infrastructure/mysql"
	"20dojo-online/pkg/infrastructure/mysql/repository"
	"20dojo-online/pkg/infrastructure/redis"
	repository2 "20dojo-online/pkg/infrastructure/redis/repository"
	"20dojo-online/pkg/interfaces/handler"
	"20dojo-online/pkg/usecase/interactor"
)

// Injectors from wire.go:

func InitializeUserService() handler.UserService {
	sqlHandler := mysql.NewSQLHandler()
	userRepository := repository.NewUserRepositoryImpl(sqlHandler)
	userUseCase := interactor.NewUserUseCase(userRepository)
	userService := handler.NewUserService(userUseCase)
	return userService
}

func InitializeGameService() handler.GameService {
	sqlHandler := mysql.NewSQLHandler()
	userRepository := repository.NewUserRepositoryImpl(sqlHandler)
	gameUseCase := interactor.NewGameUseCase(userRepository)
	gameService := handler.NewGameService(gameUseCase)
	return gameService
}

func InitializeGachaService() handler.GachaService {
	sqlHandler := mysql.NewSQLHandler()
	userRepository := repository.NewUserRepositoryImpl(sqlHandler)
	collectionItemRepository := repository.NewCollectionItemRepositoryImpl(sqlHandler)
	userCollectionItemRepository := repository.NewUserCollectionItemRepositoryImpl(sqlHandler)
	gachaProbabilityRepository := repository.NewGachaProbabilityRepositoryImpl(sqlHandler)
	gachaUseCase := interactor.NewGachaUseCase(userRepository, collectionItemRepository, userCollectionItemRepository, gachaProbabilityRepository)
	gachaService := handler.NewGachaService(gachaUseCase)
	return gachaService
}

func InitializeRankingService() handler.RankingService {
	sqlHandler := mysql.NewSQLHandler()
	userRepository := repository.NewUserRepositoryImpl(sqlHandler)
	cacheHandler := redis.NewCacheHandler()
	rankingRepository := repository2.NewRankingRepositoryImpl(cacheHandler)
	rankingUseCase := interactor.NewRankingUseCase(userRepository, rankingRepository)
	rankingService := handler.NewRankingService(rankingUseCase)
	return rankingService
}

func InitializeCollectionService() handler.CollectionService {
	sqlHandler := mysql.NewSQLHandler()
	collectionItemRepository := repository.NewCollectionItemRepositoryImpl(sqlHandler)
	userCollectionItemRepository := repository.NewUserCollectionItemRepositoryImpl(sqlHandler)
	collectionItemUseCase := interactor.NewCollectionItemUseCase(collectionItemRepository, userCollectionItemRepository)
	collectionService := handler.NewCollectionService(collectionItemUseCase)
	return collectionService
}
